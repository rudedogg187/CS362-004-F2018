        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:
        -:    5:#include <assert.h>
        -:    6:#include <stdio.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:// whoseTurn input: gameState struct
        -:   10:// whoseTurn return: current player
        1:   11:int main() {
        1:   12:	printf("whoseTurn() Test\n");
        -:   13:
        1:   14:	int fail = 0;
        -:   15:
        -:   16:	// minium number of players requried for game
        1:   17:	int minPlayers = 2;
        -:   18:	// maximum number of players allowd for game
        1:   19:	int maxPlayers = MAX_PLAYERS;
        -:   20:
        1:   21:	int testCases[4] = {-1, 0, 1, 9999};
        -:   22:
        -:   23:	// declare a gameState struct
        -:   24:	struct gameState G;
        -:   25:
        -:   26:	// counters to track tries and successes
        1:   27:	int try = 0;
        1:   28:	int pass = 0;
        -:   29:
        -:   30:	// iterate from min number of players to max number of players
        4:   31:	for(int players = minPlayers; players <= maxPlayers; players++) {
        -:   32:		// set game state players to current number of player in iteratiion
        3:   33:		G.numPlayers = players;
        -:   34:		// print the number of players involved in current test
        3:   35:		printf(" G.numPlayers: %d\n", G.numPlayers);
        -:   36:
        -:   37:		// iterate through test case array - turn number to test
       15:   38:		for(int c = 0; c < 4; c++) {
        -:   39:			// save the index of the test case to a var
       12:   40:			int testCase = testCases[c];	
        -:   41:			// print the turn number involved in current test
       12:   42:			printf("  Testing Turn Number: %d\n", testCase);
        -:   43:
        -:   44:			// save curent turn as player 1 - number of players in current game
       12:   45:			int currTurn = testCase % players + 1;
        -:   46:			// set the game states whose turn member to currTurn var
       12:   47:			G.whoseTurn = currTurn;
        -:   48:			
        -:   49:			// assert that whoseTurn() returns the value just set	
       12:   50:			assert(currTurn == whoseTurn(&G));
        -:   51:			// increment try counter for each attempt
       12:   52:			try++;
        -:   53:			// if test passes
       12:   54:			if(currTurn == whoseTurn(&G)) { 
        -:   55:				// print pass message
       12:   56:				printf("  PASS\n\n");
        -:   57:				// increment pass counter with each success
       12:   58:				pass++;
        -:   59:			} else {
        -:   60:				// if fail print message
    #####:   61:				printf("  FAIL\n\n");
    #####:   62:				fail++;
        -:   63:			};
        -:   64:			
        -:   65:		}
        -:   66:	}
        -:   67:	
        -:   68:	// print attempts, successes and success percentage
        -:   69:	//printf("%d of %d %f&& passed\n\n", pass, try, (pass * 1.0)  / try);
        -:   70:
        1:   71:	if(fail > 0) {
    #####:   72:		printf("FAILED TEST\n");
        -:   73:	} else {
        1:   74:		printf("PASSED TEST\n");
        -:   75:	}
        -:   76:
        1:   77:	return 0;
        -:   78:
        -:   79:}
