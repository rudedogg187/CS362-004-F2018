        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:
        -:    5:#include <assert.h>
        -:    6:#include <stdio.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:
        -:   10:// adventurer
        1:   11:int main() {
        1:   12:	int useCardEffect = 1;
        1:   13:	int card = adventurer;
        1:   14:	int choice1 = 0;
        1:   15:	int choice2 = 0;
        1:   16:	int choice3 = 0;
        1:   17:	int handPos = 0;
        1:   18:	int bonus = 0;
        -:   19:	//int isTrash = 0;
        1:   20:	int treasureCnt = 0;
        -:   21:	int tempHand[MAX_HAND];
        1:   22:	int tempCnt = 0;
        -:   23:	
        -:   24:
        1:   25:	printf("Adventurer Card Test\n");
        -:   26:
        1:   27:	int seed = 3;
        1:   28:	int players = 3;
        -:   29:	struct gameState G;
        -:   30:	struct gameState G2;
        -:   31:	
        1:   32:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy };
        -:   33:
        1:   34:	initializeGame(players, k, seed, &G);
        1:   35:	memcpy(&G2, &G, sizeof(struct gameState));
        -:   36:
        1:   37:	int currPlayer = G.whoseTurn;
        1:   38:	int currPlayer2 = G2.whoseTurn;
        -:   39:
        1:   40:	if(useCardEffect == 0) {
    #####:   41:		adventurerEffect(&G);
        -:   42:	} else {
        1:   43:		cardEffect(card, choice1, choice2, choice3, &G, handPos, &bonus);
        -:   44:	}
        -:   45:
        3:   46:	for(int treasure= 0; treasure < 2; treasure++) {
        2:   47:		if(G2.deckCount[currPlayer] < 1) {
    #####:   48:			printf("HERE\n");
    #####:   49:			shuffle(currPlayer2, &G2);
        -:   50:		}
        -:   51:
        2:   52:		drawCard(currPlayer2, &G2);
        2:   53:		int cardDrawn = G2.hand[currPlayer2][G2.handCount[currPlayer2] - 1];
        -:   54:
        2:   55:		if(cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
        2:   56:			treasureCnt++;	
        -:   57:		} else {
    #####:   58:			tempHand[tempCnt] = cardDrawn;
    #####:   59:			G2.handCount[currPlayer2]--;
    #####:   60:			tempCnt ++;
        -:   61:		}
        -:   62:	}
        -:   63:
        2:   64:	while(tempCnt - 1 >= 0) {
    #####:   65:		G2.discard[currPlayer2][G2.discardCount[currPlayer2]++ ] = tempHand[tempCnt - 1];
    #####:   66:		tempCnt = tempCnt -1;
        -:   67:
        -:   68:	}
        -:   69:
        -:   70:
        1:   71:	int cardCnt = G.handCount[currPlayer];
        1:   72:	int cardCnt2 = G2.handCount[currPlayer];
        -:   73:
        1:   74:	int cmp = memcmp(&G, &G2, sizeof(struct gameState));
        -:   75:
        1:   76:	if(cardCnt != cardCnt2) {
    #####:   77:		printf("FAIL - CARD COUNTS DIFFER BY %d\n", cardCnt - cardCnt2);
        -:   78:	}
        -:   79:
        1:   80:	if(cmp != 0) {
        1:   81:		printf("FAIL - GAME-STATE and TEST GAME STATE DIFFER (%d)\n", cmp);
        -:   82:	}
        -:   83:
        1:   84:	if(cmp == 0 && cardCnt == cardCnt2) {
    #####:   85:		printf("PASS - TEST COMPLETE\n");
        -:   86:	}
        -:   87:
        -:   88:	//assert(cardCnt == cardCnt2);
        -:   89:	//assert(cmp == 0);
        -:   90:
        -:   91:	//printf("cp: %d, hc: %d\n", currPlayer, cardCnt);
        -:   92:	//printf("cp: %d, hc: %d\n", currPlayer2, cardCnt2);
        -:   93:	//printf("cmp: %d\n", cmp);
        -:   94:
        -:   95:	
        -:   96:
        1:   97:	return 0;
        -:   98:
        -:   99:}
