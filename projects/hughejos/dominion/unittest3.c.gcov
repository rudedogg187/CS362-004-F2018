        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:
        -:    5:#include <assert.h>
        -:    6:#include <stdio.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:// isGameOver input gameState struct:
        -:   10:// isGameOver return 1 if true; return 0 if false;
        1:   11:int main() {
        1:   12:	printf("isGameOver() Test\n");
        -:   13:
        1:   14:	int fail = 0;
        -:   15:
        -:   16:	// min number of players required for game
        1:   17:	int minPlayers = 2;
        -:   18:	// max number of players allowed for game
        1:   19:	int maxPlayers = MAX_PLAYERS;
        -:   20:
        -:   21:	// declare a gameState struct
        -:   22:	struct gameState G;
        -:   23:
        -:   24:	// random seed for game init	
        1:   25:	int seed = 3;
        -:   26:
        -:   27:	int provinceCnt;
        -:   28:
        -:   29:	int isOver;
        -:   30:
        -:   31:	// cards for game
        1:   32:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy };
        -:   33:	// iterate from min number of players to max number of players
        -:   34:
        4:   35:	for(int players = minPlayers; players <= maxPlayers; players++) {
        3:   36:		initializeGame(players, k, seed, &G);
        3:   37:		printf(" G.numPlayers: %d\n", G.numPlayers);
        3:   38:		provinceCnt = G.supplyCount[province];
        -:   39:
       38:   40:		while(provinceCnt > 0) {
       32:   41:			G.supplyCount[province]--;
       32:   42:			provinceCnt--;
       32:   43:			printf("Provence Count: %d\n", provinceCnt);
        -:   44:
       32:   45:			if(provinceCnt == 0) {
        3:   46:				isOver = 1;	
        -:   47:			} else {
       29:   48:				isOver = 0;
        -:   49:			}
        -:   50:
       32:   51:			printf("Game Over: %d\n", isOver);
        -:   52:
        -:   53:			//assert(isOver == isGameOver(&G));
       32:   54:			if(isOver == isGameOver(&G)) {
       32:   55:				printf("PASS\n");
        -:   56:			} else {
    #####:   57:				printf("FAIL\n");
    #####:   58:				fail++;
        -:   59:			}
        -:   60:
        -:   61:		}
        -:   62:		
        -:   63:	}
        -:   64:
        1:   65:	if(fail > 0) {
    #####:   66:		printf("FAILED TEST\n");
        -:   67:	} else {
        1:   68:		printf("PASSED TEST\n");
        -:   69:	}
        -:   70:
        -:   71:
        1:   72:	return 0;
        -:   73:
        -:   74:}
