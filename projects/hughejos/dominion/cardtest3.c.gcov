        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:
        -:    5:#include <assert.h>
        -:    6:#include <stdio.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:
        -:   10:// remodel
        1:   11:int main() {
        1:   12:	int useCardEffect = 1;
        1:   13:	int card = remodel;
        1:   14:	int choice1 = embargo;
        1:   15:	int choice2 = adventurer;
        1:   16:	int choice3 = 0;
        1:   17:	int handPos = 0;
        1:   18:	int bonus = 0;
        1:   19:	int isTrash = 0;
        1:   20:	int isFlag = 0;
        -:   21:
        1:   22:	printf("Remodel Card Test\n");
        -:   23:
        1:   24:	int seed = 3;
        1:   25:	int players = 3;
        -:   26:	struct gameState G;
        -:   27:	struct gameState G2;
        -:   28:	
        1:   29:	int k[10] = { adventurer, remodel, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy };
        -:   30:
        1:   31:	initializeGame(players, k, seed, &G);
        1:   32:	memcpy(&G2, &G, sizeof(struct gameState));
        -:   33:
        1:   34:	if(useCardEffect == 0) {
    #####:   35:		remodelEffect(&G, handPos, choice1, choice2);
        -:   36:	} else {
        1:   37:		cardEffect(card, choice1, choice2, choice3, &G, handPos, &bonus);
        -:   38:	}
        -:   39:
        1:   40:	int currPlayer = G.whoseTurn;
        1:   41:	int currPlayer2 = G2.whoseTurn;
        -:   42:
        -:   43:
        1:   44:	int toTrash = G2.hand[currPlayer2][choice1];
        1:   45:	if( getCost(toTrash) + 2 <= getCost(choice2)) {
        1:   46:		gainCard(choice2, &G2, isFlag, currPlayer2);
        1:   47:		discardCard(handPos, currPlayer2, &G2, isTrash);
        5:   48:		for(int c = 0; c < G2.handCount[currPlayer2]; c++) {
        4:   49:			if(G2.hand[currPlayer2][c] == toTrash) {
    #####:   50:				discardCard(c, currPlayer2, &G2, isTrash);
    #####:   51:				break;
        -:   52:			}
        -:   53:		}
        -:   54:	}
        -:   55:
        -:   56:
        1:   57:	int cardCnt = G.handCount[currPlayer];
        1:   58:	int cardCnt2 = G2.handCount[currPlayer];
        1:   59:	int cmp = memcmp(&G, &G2, sizeof(struct gameState));
        -:   60:
        1:   61:	if(cardCnt != cardCnt2) {
    #####:   62:		printf("FAIL - CARD COUNTS DIFFER BY %d\n", cardCnt - cardCnt2);
        -:   63:	}
        -:   64:
        1:   65:	if(cmp != 0) {
        1:   66:		printf("FAIL - GAME-STATE and TEST GAME-STATE DIFFER (%d)\n", cmp);
        -:   67:	}
        -:   68:
        1:   69:	if(cmp == 0 && cardCnt == cardCnt2) {
    #####:   70:		printf("PASS - TEST COMPLETE\n");
        -:   71:	}
        -:   72:
        -:   73:	//assert(cardCnt == cardCnt2);
        -:   74:	//assert(cmp == 0);
        -:   75:
        -:   76:	//printf("cp: %d, hc: %d\n", currPlayer, cardCnt);
        -:   77:	//printf("cp: %d, hc: %d\n", currPlayer2, cardCnt2);
        -:   78:	//printf("cmp: %d\n", cmp);
        -:   79:
        1:   80:	return 0;
        -:   81:
        -:   82:}
